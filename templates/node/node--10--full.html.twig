{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}

{%
  set header_classes = [
    'landing-header',
    'w-100',
    node.field_lp_layout.value|clean_class,
  ]
%}

{%
  set header_content_classes = ['content']
%}

{%
  set content_classes = [
    'landing-content',
    node.field_lp_layout.value|clean_class,
  ]
%}

{%
  set sidebar_classes = [
    'landing-sidebar'
  ]
%}

{# camp landing pages need both banner & header content outputted #}
{% if '/camps/' in path('entity.node.canonical', {'node': node.id}) %}
  {% include '@openy_carnation/node/include/header-default--camp.html.twig' %}
{% else %}
  {# default header #}
  {% include '@openy_clover/node/include/header-default.html.twig' %}
{% endif %}

{% if node.field_lp_layout.value == "two_column_fixed" %}
  {{ attach_library('openy_rose/landing') }}
{% endif %}

{% if node.field_lp_layout.value != "one_column_clean" %}
  <nav class="d-lg-none navbar navbar-sidebar navbar-inverse navbar-static-top" role="navigation">
    <div class="container-fluid">
      <div class="navbar-header ml-auto">
        <button type="button" class="navbar-toggle collapsed  navbar-toggler-right" data-toggle="collapse" data-target=".bs-example-navbar-collapse-1">
          <span class="navbar-toggler-icon"></span>
        </button>
      </div>
    </div>
  </nav>
  <div class="container-fluid">
{% endif %}

  {% if content.field_content is not empty %}
    <article{{ attributes.addClass(content_classes) }}>

      <div id="sidebar-2" class="d-flex ml-auto bs-example-navbar-collapse-1 sidebar sidfixed-top collapse fade">
        <div class="row px-3 px-lg-0">
          <div class="d-flex w-100 p-3 top-bar">
            <button class="ml-auto sidebar-toggle" data-toggle="collapse" data-target=".bs-example-navbar-collapse-1"><i class="fa fa-times"
                                                                                                         aria-hidden="true"></i>
            </button>
          </div>
          <div class="h-100 page-head__main-menu text-left sidebar-mobile col-12"></div>
        </div>
      </div>

      {% if ( node.field_lp_layout.value == "two_column" ) or ( node.field_lp_layout.value == "two_column_fixed" ) %}
      <div class="two-column row">
        <div class="main-region col-md col-lg">
          {% endif %}
          {{ content.field_content }}
          {% if ( node.field_lp_layout.value == "two_column" ) or ( node.field_lp_layout.value == "two_column_fixed" ) %}
        </div>

        <div class="sidebar-region col-md-5 col-lg-4 d-none d-lg-block">
          {% endif %}
          <article{{ attributes.addClass(sidebar_classes) }}>
            <div class="sidebar-desktop">
              {{ content.field_sidebar_content }}
            </div>
          </article>
          {% if ( node.field_lp_layout.value == "two_column" ) or ( node.field_lp_layout.value == "two_column_fixed" ) %}
        </div>
      </div>
      {% endif %}

    </article>
  {% endif %}

{% if node.field_lp_layout.value != "one_column_clean" %}
</div>
{% endif %}
